
#!/usr/bin/env python3
"""
Bot Discord Faer√ªn - Affiche les dates du calendrier de Faer√ªn
"""

import os
import logging
from datetime import datetime, timezone
from threading import Thread

import discord
from discord.ext import commands
from flask import Flask

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Configuration
class Config:
    """Configuration centralis√©e de l'application"""
    DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
    COMMAND_PREFIX = '!'
    FLASK_HOST = '0.0.0.0'
    FLASK_PORT = 8080
    
    # Calendrier de Faer√ªn
    MONTHS_HARPTOS = [
        "Hammer", "Alturiak", "Ches", "Tarsakh", "Mirtul", "Kythorn",
        "Flamerule", "Eleasis", "Eleint", "Marpenoth", "Uktar", "Nightal"
    ]
    
    # D√©calage pour convertir l'ann√©e r√©elle en ann√©es DR (Dale Reckoning)
    DR_YEAR_OFFSET = 628

class FaerunCalendar:
    """Gestion du calendrier de Faer√ªn"""
    
    @staticmethod
    def get_faerun_date() -> tuple[int, str, int]:
        """
        Retourne la date actuelle dans le calendrier de Faer√ªn
        Returns:
            tuple: (jour, mois, ann√©e_DR)
        """
        today = datetime.now(timezone.utc)
        year_dr = today.year - Config.DR_YEAR_OFFSET
        
        day_of_year = today.timetuple().tm_yday
        month_index = min((day_of_year - 1) // 30, len(Config.MONTHS_HARPTOS) - 1)
        day_in_month = ((day_of_year - 1) % 30) + 1
        
        month_name = Config.MONTHS_HARPTOS[month_index]
        
        return day_in_month, month_name, year_dr

class WebServer:
    """Serveur Flask pour maintenir le bot actif"""
    
    def __init__(self):
        self.app = Flask(__name__)
        self._setup_routes()
    
    def _setup_routes(self):
        """Configuration des routes Flask"""
        @self.app.route('/')
        def home():
            return {
                "status": "active",
                "message": "Bot Faer√ªn actif",
                "version": "1.0.0"
            }
        
        @self.app.route('/health')
        def health():
            return {"status": "healthy"}
    
    def run(self):
        """Lance le serveur Flask"""
        self.app.run(
            host=Config.FLASK_HOST,
            port=Config.FLASK_PORT,
            debug=False
        )
    
    def start_in_thread(self):
        """Lance le serveur dans un thread s√©par√©"""
        thread = Thread(target=self.run, daemon=True)
        thread.start()
        logger.info(f"Serveur web d√©marr√© sur {Config.FLASK_HOST}:{Config.FLASK_PORT}")

class FaerunBot:
    """Bot Discord pour les dates de Faer√ªn"""
    
    def __init__(self):
        # Configuration des intents Discord
        intents = discord.Intents.default()
        intents.message_content = True
        
        # Initialisation du bot
        self.bot = commands.Bot(
            command_prefix=Config.COMMAND_PREFIX,
            intents=intents,
            help_command=None  # D√©sactive la commande d'aide par d√©faut
        )
        
        self._setup_events()
        self._setup_commands()
    
    def _setup_events(self):
        """Configuration des √©v√©nements du bot"""
        @self.bot.event
        async def on_ready():
            logger.info(f'Bot connect√© : {self.bot.user}')
            logger.info(f'Serveurs connect√©s : {len(self.bot.guilds)}')
    
    def _setup_commands(self):
        """Configuration des commandes du bot"""
        @self.bot.command(name='faerun', help='Affiche la date actuelle dans le calendrier de Faer√ªn')
        async def faerun_date(ctx):
            try:
                day, month, year = FaerunCalendar.get_faerun_date()
                
                embed = discord.Embed(
                    title="üìÖ Date de Faer√ªn",
                    description=f"**{day} {month}, {year} DR**",
                    color=0x8B4513  # Couleur bronze/terre
                )
                embed.set_footer(text="Calendrier de Harptos")
                
                await ctx.send(embed=embed)
                logger.info(f"Commande faerun ex√©cut√©e par {ctx.author}")
                
            except Exception as e:
                logger.error(f"Erreur lors de l'ex√©cution de la commande faerun: {e}")
                await ctx.send("‚ùå Une erreur s'est produite lors du calcul de la date.")
        
        @self.bot.command(name='help', help='Affiche cette aide')
        async def help_command(ctx):
            embed = discord.Embed(
                title="üõ°Ô∏è Commandes du Bot Faer√ªn",
                color=0x5865F2
            )
            embed.add_field(
                name=f"{Config.COMMAND_PREFIX}faerun",
                value="Affiche la date actuelle dans le calendrier de Faer√ªn",
                inline=False
            )
            embed.add_field(
                name=f"{Config.COMMAND_PREFIX}help",
                value="Affiche cette aide",
                inline=False
            )
            embed.set_footer(text="Bot cr√©√© pour les aventures en Faer√ªn")
            
            await ctx.send(embed=embed)
    
    def run(self):
        """Lance le bot Discord"""
        if not Config.DISCORD_TOKEN:
            logger.error("Token Discord manquant ! V√©rifiez la variable d'environnement DISCORD_TOKEN")
            return
        
        try:
            self.bot.run(Config.DISCORD_TOKEN)
        except Exception as e:
            logger.error(f"Erreur lors du lancement du bot: {e}")

def main():
    """Point d'entr√©e principal de l'application"""
    logger.info("D√©marrage de l'application Bot Faer√ªn")
    
    # D√©marrage du serveur web
    web_server = WebServer()
    web_server.start_in_thread()
    
    # D√©marrage du bot Discord
    bot = FaerunBot()
    bot.run()

if __name__ == "__main__":
    main()
