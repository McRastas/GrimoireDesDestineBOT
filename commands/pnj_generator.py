# commands/pnj_generator.py
import discord
from discord import app_commands
from typing import Optional
import random
import logging
from .base import BaseCommand

logger = logging.getLogger(__name__)


class PnjGeneratorCommand(BaseCommand):
    """G√©n√©rateur de PNJ avec format optimis√© Roll20"""

    def __init__(self, bot):
        super().__init__(bot)

    @property
    def name(self) -> str:
        return "pnj-generator"

    @property
    def description(self) -> str:
        return "G√©n√®re un PNJ complet pour D&D avec format Roll20"

    def register(self, tree: app_commands.CommandTree):
        """Enregistrement de la commande avec option format Roll20"""

        @tree.command(name=self.name, description=self.description)
        @app_commands.describe(
            type_pnj="Type de PNJ √† g√©n√©rer",
            genre="Genre du PNJ",
            race="Race du PNJ",
            format_roll20="Format optimis√© pour Roll20 (recommand√©)"
        )
        @app_commands.choices(type_pnj=[
            app_commands.Choice(name="üõ°Ô∏è Garde", value="garde"),
            app_commands.Choice(name="üí∞ Marchand", value="marchand"),
            app_commands.Choice(name="üëë Noble", value="noble"),
            app_commands.Choice(name="üç∫ Aubergiste", value="aubergiste"),
            app_commands.Choice(name="‚õ™ Pr√™tre", value="pretre"),
            app_commands.Choice(name="üó°Ô∏è Aventurier", value="aventurier"),
            app_commands.Choice(name="üî® Artisan", value="artisan"),
            app_commands.Choice(name="üåæ Paysan", value="paysan"),
            app_commands.Choice(name="üóùÔ∏è Voleur", value="voleur"),
            app_commands.Choice(name="üîÆ Mage", value="mage")
        ])
        @app_commands.choices(genre=[
            app_commands.Choice(name="‚ôÇÔ∏è Masculin", value="masculin"),
            app_commands.Choice(name="‚ôÄÔ∏è F√©minin", value="feminin"),
            app_commands.Choice(name="üé≤ Al√©atoire", value="aleatoire")
        ])
        @app_commands.choices(race=[
            app_commands.Choice(name="üë§ Humain", value="humain"),
            app_commands.Choice(name="üßù Elfe", value="elfe"),
            app_commands.Choice(name="‚öíÔ∏è Nain", value="nain"),
            app_commands.Choice(name="üåø Halfelin", value="halfelin"),
            app_commands.Choice(name="üåô Demi-Elfe", value="demi-elfe"),
            app_commands.Choice(name="üòà Tieffelin", value="tieffelin"),
            app_commands.Choice(name="üé≤ Al√©atoire", value="aleatoire")
        ])
        @app_commands.choices(format_roll20=[
            app_commands.Choice(name="‚úÖ Roll20 (Recommand√©)", value=True),
            app_commands.Choice(name="üí¨ Discord", value=False)
        ])
        async def pnj_generator_command(
            interaction: discord.Interaction,
            type_pnj: str,
            genre: str = "aleatoire",
            race: str = "aleatoire",
            format_roll20: bool = True
        ):
            await self.callback(interaction, type_pnj, genre, race, format_roll20)

    async def callback(self,
                       interaction: discord.Interaction,
                       type_pnj: str,
                       genre: str = "aleatoire",
                       race: str = "aleatoire",
                       format_roll20: bool = True):
        """Callback principal avec gestion des deux formats"""
        try:
            # G√©n√©rer le PNJ
            pnj = self._generate_pnj(type_pnj, genre, race)

            # Choisir le format de sortie
            if format_roll20:
                content = self._format_pnj_for_roll20(pnj, type_pnj)
                embed_title = "üé≠ PNJ G√©n√©r√© (Format Roll20)"
                instructions = (
                    "1. **Copiez** le texte ci-dessous\n"
                    "2. **Collez** dans les notes de votre fiche Roll20\n"
                    "3. **Adaptez** selon vos besoins de campagne"
                )
            else:
                content = self._format_pnj_discord(pnj, type_pnj)
                embed_title = "üé≠ PNJ G√©n√©r√© (Format Discord)"
                instructions = (
                    "1. **Copiez** le contenu format√©\n"
                    "2. **Utilisez** directement dans Discord\n"
                    "3. **Modifiez** selon vos besoins"
                )

            # Cr√©er l'embed d'information
            embed = discord.Embed(
                title=embed_title,
                description=f"**{pnj['nom']}** - {pnj['race']} {type_pnj.title()}",
                color=0x3498db
            )

            embed.add_field(
                name="üë§ Aper√ßu",
                value=f"**Genre:** {pnj['genre'].title()}\n**√Çge:** {pnj['age']} ans",
                inline=True
            )

            embed.add_field(
                name="üé≠ Trait Principal",
                value=f"{pnj['personnalite']['trait_positif'].title()}",
                inline=True
            )

            embed.add_field(
                name="üìã Instructions",
                value=instructions,
                inline=False
            )

            # V√©rifier la longueur et envoyer
            if len(content) > 1900:
                await self._send_long_content(interaction, content, embed)
            else:
                await interaction.response.send_message(embed=embed)
                if format_roll20:
                    await interaction.followup.send(f"```\n{content}\n```")
                else:
                    await interaction.followup.send(content)

        except Exception as e:
            logger.error(f"Erreur g√©n√©ration PNJ: {e}")
            await interaction.response.send_message(
                "‚ùå Erreur lors de la g√©n√©ration du PNJ. Veuillez r√©essayer.",
                ephemeral=True
            )

    def _format_pnj_for_roll20(self, pnj: dict, type_pnj: str) -> str:
        """Formate le PNJ pour Roll20 (texte brut)"""
        
        template = f"""=== PNJ GENEREE ===

NOM: {pnj['nom']}
RACE: {pnj['race']}
CLASSE/TYPE: {type_pnj.title()}
GENRE: {pnj['genre'].title()}
AGE: {pnj['age']} ans

--- APPARENCE ---
{pnj['apparence']}

--- PERSONNALITE ---
Trait Positif: {pnj['personnalite']['trait_positif'].title()}
Trait Negatif: {pnj['personnalite']['trait_negatif'].title()}
Manie: {pnj['personnalite']['maniere']}
Motivation: {pnj['personnalite']['motivation'].title()}

--- BACKGROUND ---
{self._format_professional_details_roll20(pnj['details'], type_pnj)}

--- ACCROCHE RP ---
{pnj['secret']}

--- NOTES MJ ---
[Espace libre pour notes personnalisees]

=== FIN PNJ ==="""
        
        return template.strip()

    def _format_pnj_discord(self, pnj: dict, type_pnj: str) -> str:
        """Formate le PNJ pour Discord (avec formatage)"""
        
        template = f"""** / ======================= PNJ ========================= \\ **

**üìõ Nom :** {pnj['nom']}
**üé≠ Type :** {type_pnj.title()}
**‚ößÔ∏è Genre :** {pnj['genre'].title()}
**üßù Race :** {pnj['race']}
**üéÇ √Çge :** {pnj['age']} ans

**üë§ APPARENCE**
{pnj['apparence']}

**üß† PERSONNALIT√â**
‚Ä¢ **Trait positif :** {pnj['personnalite']['trait_positif'].title()}
‚Ä¢ **Trait n√©gatif :** {pnj['personnalite']['trait_negatif'].title()}
‚Ä¢ **Manie :** {pnj['personnalite']['maniere']}
‚Ä¢ **Motivation :** {pnj['personnalite']['motivation'].title()}

**üíº BACKGROUND**
{self._format_professional_details_discord(pnj['details'], type_pnj)}

**üé≤ ACCROCHE RP**
{pnj['secret']}

** \\ ======================= PNJ ========================= / **

*PNJ g√©n√©r√© automatiquement - Pr√™t √† utiliser*"""
        
        return template.strip()

    def _format_professional_details_roll20(self, details: dict, type_pnj: str) -> str:
        """Formate les d√©tails professionnels pour Roll20"""
        
        if type_pnj == "marchand":
            return f"""Specialite: {details.get('specialite', 'Marchandises g√©n√©rales')}
Richesse: {details.get('richesse', 'Modeste')}
Reputation: {details.get('reputation', 'Honn√™te')}
Experience: {details.get('info_extra', '√âtabli depuis quelques ann√©es')}"""
        
        elif type_pnj == "noble":
            return f"""Titre: {details.get('titre', 'Lord/Lady')}
Domaine: {details.get('domaine', 'Terres agricoles')}
Influence: {details.get('influence', 'Locale')}
Lignee: {details.get('info_extra', 'Famille ancienne')}"""
        
        elif type_pnj == "garde":
            return f"""Rang: {details.get('rang', 'Simple garde')}
Experience: {details.get('experience', '5 ans de service')}
Specialite: {details.get('specialite', 'Patrouilles')}
Background: {details.get('info_extra', 'Natif de la r√©gion')}"""
        
        elif type_pnj == "aubergiste":
            return f"""Etablissement: {details.get('etablissement', 'Auberge modeste')}
Reputation: {details.get('reputation', 'Accueillant')}
Specialite: {details.get('specialite_culinaire', 'Cuisine locale')}
Experience: {details.get('info_extra', 'G√©rant depuis des ann√©es')}"""
        
        elif type_pnj == "pretre":
            return f"""Divinite: {details.get('divinite', 'Divinit√© majeure')}
Rang: {details.get('rang_clerical', 'Pr√™tre')}
Temple: {details.get('temple', 'Temple local')}
Devotion: {details.get('info_extra', 'Serviteur fid√®le')}"""
        
        else:
            return "D√©tails √† d√©velopper selon les besoins de la campagne"

    def _format_professional_details_discord(self, details: dict, type_pnj: str) -> str:
        """Formate les d√©tails professionnels pour Discord"""
        
        if type_pnj == "marchand":
            return f"""‚Ä¢ **Sp√©cialit√© :** {details.get('specialite', 'Marchandises g√©n√©rales')}
‚Ä¢ **Richesse :** {details.get('richesse', 'Modeste')}
‚Ä¢ **R√©putation :** {details.get('reputation', 'Honn√™te')}
‚Ä¢ **Exp√©rience :** {details.get('info_extra', '√âtabli depuis quelques ann√©es')}"""
        
        elif type_pnj == "noble":
            return f"""‚Ä¢ **Titre :** {details.get('titre', 'Lord/Lady')}
‚Ä¢ **Domaine :** {details.get('domaine', 'Terres agricoles')}
‚Ä¢ **Influence :** {details.get('influence', 'Locale')}
‚Ä¢ **Lign√©e :** {details.get('info_extra', 'Famille ancienne')}"""
        
        elif type_pnj == "garde":
            return f"""‚Ä¢ **Rang :** {details.get('rang', 'Simple garde')}
‚Ä¢ **Exp√©rience :** {details.get('experience', '5 ans de service')}
‚Ä¢ **Sp√©cialit√© :** {details.get('specialite', 'Patrouilles')}
‚Ä¢ **Background :** {details.get('info_extra', 'Natif de la r√©gion')}"""
        
        elif type_pnj == "aubergiste":
            return f"""‚Ä¢ **√âtablissement :** {details.get('etablissement', 'Auberge modeste')}
‚Ä¢ **R√©putation :** {details.get('reputation', 'Accueillant')}
‚Ä¢ **Sp√©cialit√© :** {details.get('specialite_culinaire', 'Cuisine locale')}
‚Ä¢ **Exp√©rience :** {details.get('info_extra', 'G√©rant depuis des ann√©es')}"""
        
        elif type_pnj == "pretre":
            return f"""‚Ä¢ **Divinit√© :** {details.get('divinite', 'Divinit√© majeure')}
‚Ä¢ **Rang :** {details.get('rang_clerical', 'Pr√™tre')}
‚Ä¢ **Temple :** {details.get('temple', 'Temple local')}
‚Ä¢ **D√©votion :** {details.get('info_extra', 'Serviteur fid√®le')}"""
        
        else:
            return "‚Ä¢ **D√©tails :** √Ä d√©velopper selon les besoins de la campagne"

    async def _send_long_content(self, interaction: discord.Interaction, content: str, embed: discord.Embed):
        """Envoie du contenu long en le divisant si n√©cessaire"""
        
        await interaction.response.send_message(embed=embed)
        
        # Diviser le contenu si trop long
        if len(content) > 1900:
            parts = []
            lines = content.split('\n')
            current_part = ""
            
            for line in lines:
                if len(current_part) + len(line) + 1 > 1900:
                    if current_part:
                        parts.append(current_part)
                    current_part = line
                else:
                    current_part += ("\n" if current_part else "") + line
            
            if current_part:
                parts.append(current_part)
            
            for i, part in enumerate(parts):
                if i == 0:
                    await interaction.followup.send(f"```\n{part}\n```")
                else:
                    await interaction.followup.send(f"```\n{part}\n```")
        else:
            await interaction.followup.send(f"```\n{content}\n```")

    def _generate_pnj(self, type_pnj: str, genre: str, race: str) -> dict:
        """G√©n√®re un PNJ complet"""

        # D√©terminer le genre
        if genre == "aleatoire":
            genre = random.choice(["masculin", "feminin"])

        # D√©terminer la race
        if race == "aleatoire":
            race = random.choice([
                "humain", "elfe", "nain", "halfelin", "demi-elfe", "tieffelin"
            ])

        # G√©n√©rer le nom
        nom = self._generate_name(race, genre)

        # G√©n√©rer l'apparence
        apparence = self._generate_appearance(race, genre)

        # G√©n√©rer la personnalit√©
        personnalite = self._generate_personality()

        # G√©n√©rer les d√©tails selon le type
        details = self._generate_type_details(type_pnj)

        # G√©n√©rer un secret/accroche
        secret = self._generate_secret(type_pnj)

        return {
            "nom": nom,
            "race": race.title(),
            "genre": genre,
            "apparence": apparence,
            "personnalite": personnalite,
            "details": details,
            "secret": secret,
            "age": self._generate_age(race)
        }

    def _generate_name(self, race: str, genre: str) -> str:
        """G√©n√®re un nom selon la race et le genre"""

        names_data = {
            "humain": {
                "masculin": [
                    "Aldric", "Bran", "Cedric", "Dorian", "Elias", "Finn",
                    "Gareth", "Henri", "Ivan", "Jasper", "Klaus", "Leon",
                    "Magnus", "Nolan", "Oscar", "Pavel", "Quinn", "Roland",
                    "Stefan", "Tristan", "Ulric", "Victor", "Willem", "Xavier"
                ],
                "feminin": [
                    "Aria", "Beatrice", "Celeste", "Diana", "Elena", "Fiona",
                    "Gwen", "Helena", "Iris", "Juliet", "Kira", "Luna",
                    "Mira", "Nora", "Olivia", "Petra", "Quinn", "Rosa",
                    "Stella", "Tara", "Uma", "Vera", "Willa", "Xara"
                ]
            },
            "elfe": {
                "masculin": [
                    "Aelar", "Berrian", "Dayereth", "Enna", "Galinndan",
                    "Hadarai", "Lamlis", "Mindartis", "Naal", "Nutae",
                    "Paelynn", "Peren", "Quarion", "Riardon", "Rolen",
                    "Silvyr", "Suhnaal", "Thamior", "Theren", "Theriatis"
                ],
                "feminin": [
                    "Adrie", "Birel", "Caelynn", "Dara", "Enna", "Galinndan",
                    "Hadarai", "Immeral", "Ivellios", "Korfel", "Lamlis",
                    "Mindartis", "Naal", "Nutae", "Paelynn", "Peren",
                    "Quarion", "Riardon", "Rolen", "Silvyr"
                ]
            },
            "nain": {
                "masculin": [
                    "Adrik", "Baern", "Darrak", "Eberk", "Fargrim", "Gardain",
                    "Harbek", "Kildrak", "Morgran", "Orsik", "Rangrim",
                    "Taklinn", "Thorek", "Travok", "Ulfgar", "Vondal",
                    "Balin", "Dwalin", "Oin", "Gloin"
                ],
                "feminin": [
                    "Amber", "Bardryn", "Diesa", "Eldeth", "Gunnloda",
                    "Gwyn", "Helja", "Hlin", "Kathra", "Kristryd",
                    "Ilde", "Liftrasa", "Mardred", "Riswynn", "Sannl",
                    "Torbera", "Torgga", "Vistra"
                ]
            },
            "halfelin": {
                "masculin": [
                    "Alton", "Ander", "Bernie", "Bobbin", "Cade", "Callus",
                    "Corrin", "Dannad", "Dinodas", "Eberk", "Finnan",
                    "Garret", "Lindal", "Lyle", "Merric", "Milo",
                    "Osborn", "Perrin", "Reed", "Roscoe", "Wellby"
                ],
                "feminin": [
                    "Andry", "Bree", "Callie", "Cora", "Euphemia", "Jillian",
                    "Kithri", "Lavinia", "Lidda", "Merla", "Nedda",
                    "Paela", "Portia", "Seraphina", "Shaena", "Trym",
                    "Vani", "Verna", "Celandine", "Amaryllis"
                ]
            },
            "demi-elfe": {
                "masculin": [
                    "Abel", "Aramil", "Arannis", "Berrian", "Cithreth",
                    "Dayereth", "Drannor", "Enna", "Galinndan", "Hadarai",
                    "Heian", "Himo", "Immeral", "Ivellios", "Korfel",
                    "Lamlis", "Laucian", "Mindartis", "Naal", "Nutae"
                ],
                "feminin": [
                    "Adrie", "Althaea", "Anastrianna", "Andraste", "Antinua",
                    "Bethrynna", "Birel", "Caelynn", "Dara", "Enna",
                    "Galinndan", "Hadarai", "Halimath", "Heian", "Himo",
                    "Immeral", "Ivellios", "Korfel", "Lamlis", "Laucian"
                ]
            },
            "tieffelin": {
                "masculin": [
                    "Akmenos", "Amnon", "Barakas", "Damakos", "Ekemon",
                    "Iados", "Kairon", "Leucis", "Melech", "Mordai",
                    "Morthos", "Pelaios", "Skamos", "Therai", "Valeth",
                    "Verin", "Zeth", "Amon", "Andram", "Astaroth"
                ],
                "feminin": [
                    "Akta", "Anakir", "Bryseis", "Criella", "Damaia",
                    "Ea", "Kallista", "Lerissa", "Makaria", "Nemeia",
                    "Orianna", "Phelaia", "Rieta", "Ronassah", "Seraphina",
                    "Valeria", "Vellynne", "Xara", "Yalda", "Zariel"
                ]
            }
        }

        race_names = names_data.get(race, names_data["humain"])
        gender_names = race_names.get(genre, race_names["masculin"])
        
        return random.choice(gender_names)

    def _generate_appearance(self, race: str, genre: str) -> str:
        """G√©n√®re l'apparence selon la race et le genre"""

        tailles = {
            "humain": ["grand", "moyen", "petit"],
            "elfe": ["√©lanc√©", "gracieux", "svelte"],
            "nain": ["trapu", "robuste", "costaud"],
            "halfelin": ["petit", "menu", "d√©licat"],
            "demi-elfe": ["grand", "√©lanc√©", "gracieux"],
            "tieffelin": ["imposant", "√©lanc√©", "myst√©rieux"]
        }

        cheveux = [
            "noirs", "bruns", "ch√¢tains", "blonds", "roux", "gris", "blancs",
            "argent√©s", "cuivr√©s"
        ]

        yeux = [
            "noirs", "bruns", "verts", "bleus", "gris", "noisette", "dor√©s",
            "violets", "rouges"
        ]

        distinctifs = [
            "une cicatrice sur la joue", "une dent en or", "un tatouage tribal",
            "une bague orn√©e", "une amulette", "une cape color√©e",
            "des bijoux voyants", "un chapeau distinctif", "une canne sculpt√©e",
            "une sacoche en cuir", "des gants √©l√©gants", "une √©pingle √† cheveux"
        ]

        taille = random.choice(tailles.get(race, tailles["humain"]))
        cheveux_desc = random.choice(cheveux)
        yeux_desc = random.choice(yeux)
        distinctif = random.choice(distinctifs)

        # G√©rer les sp√©cificit√©s raciales
        if race == "nain" and genre == "masculin":
            barbes = ["courte et soign√©e", "longue et tress√©e", "√©paisse et grise", "rousse et fournie"]
            barbe_desc = random.choice(barbes)
            return f"{taille.title()}, aux cheveux {cheveux_desc} et aux yeux {yeux_desc}. Porte {barbe_desc} et a {distinctif}."
        else:
            return f"{taille.title()}, aux cheveux {cheveux_desc} et aux yeux {yeux_desc}. A {distinctif}."

    def _generate_personality(self) -> dict:
        """G√©n√®re les traits de personnalit√©"""

        traits_positifs = [
            "g√©n√©reux", "courageux", "loyal", "intelligent", "charismatique",
            "patient", "d√©termin√©", "honn√™te", "compassionnel", "humble"
        ]

        traits_negatifs = [
            "cupide", "impatient", "t√™tu", "arrogant", "m√©fiant", "paresseux",
            "bavard", "pessimiste", "jaloux", "col√©rique"
        ]

        manieres = [
            "se gratte le nez quand il ment",
            "tapote des doigts quand il r√©fl√©chit", "cligne beaucoup des yeux",
            "se penche en avant pour √©couter", "croise toujours les bras",
            "sourit trop souvent", "baisse la voix pour les secrets",
            "regarde toujours par-dessus l'√©paule"
        ]

        motivations = [
            "prot√©ger sa famille", "devenir riche", "se venger d'un ennemi",
            "d√©couvrir la v√©rit√© sur son pass√©", "aider les plus d√©munis",
            "atteindre la reconnaissance", "pr√©server une tradition",
            "explorer de nouveaux horizons"
        ]

        return {
            "trait_positif": random.choice(traits_positifs),
            "trait_negatif": random.choice(traits_negatifs),
            "maniere": random.choice(manieres),
            "motivation": random.choice(motivations)
        }

    def _generate_type_details(self, type_pnj: str) -> dict:
        """G√©n√®re les d√©tails sp√©cifiques au type de PNJ"""

        details_by_type = {
            "marchand": {
                "specialite": random.choice([
                    "armes et armures", "potions et herbes", "bijoux pr√©cieux",
                    "√©quipement d'aventurier", "nourriture exotique",
                    "livres rares"
                ]),
                "richesse": random.choice(
                    ["prosp√®re", "modeste", "en difficult√©", "tr√®s riche"]),
                "reputation": random.choice([
                    "honn√™te", "de confiance", "un peu louche",
                    "r√©put√© pour ses prix"
                ]),
                "info_extra": "Tient boutique depuis " + str(random.randint(5, 30)) + " ans"
            },
            "noble": {
                "titre": random.choice([
                    "Lord/Lady", "Baron/Baronne", "Comte/Comtesse",
                    "Duc/Duchesse"
                ]),
                "domaine": random.choice([
                    "terres agricoles", "mines d'or", "vignobles", "for√™ts",
                    "ports commerciaux"
                ]),
                "influence": random.choice(
                    ["locale", "r√©gionale", "courtisane", "militaire"]),
                "info_extra": "Famille noble depuis " + str(random.randint(3, 12)) + " g√©n√©rations"
            },
            "garde": {
                "rang": random.choice(
                    ["simple garde", "sergent", "capitaine", "lieutenant"]),
                "experience": str(random.randint(2, 20)) + " ans de service",
                "specialite": random.choice(
                    ["patrouilles", "enqu√™tes", "formation", "garde du corps"]),
                "info_extra": random.choice([
                    "ancien soldat", "natif de la ville", "recrut√© r√©cemment"
                ])
            },
            "aubergiste": {
                "etablissement": random.choice([
                    "auberge de luxe", "taverne populaire", "relais de voyageurs",
                    "g√Æte familial"
                ]),
                "reputation": random.choice([
                    "accueillant", "discret", "convivial", "respect√©"
                ]),
                "specialite_culinaire": random.choice([
                    "rago√ªts copieux", "p√¢tisseries", "bi√®res locales",
                    "cuisine r√©gionale"
                ]),
                "info_extra": "G√©rant depuis " + str(random.randint(3, 25)) + " ans"
            },
            "pretre": {
                "divinite": random.choice([
                    "Tyr", "Helm", "Lathander", "Sel√ªne", "Tempus",
                    "Mystra", "Oghma", "Torm"
                ]),
                "rang_clerical": random.choice([
                    "acolyte", "pr√™tre", "grand pr√™tre", "chapelain"
                ]),
                "temple": random.choice([
                    "temple principal", "chapelle locale", "sanctuaire",
                    "monast√®re"
                ]),
                "info_extra": "Servant fid√®le depuis " + str(random.randint(5, 30)) + " ans"
            },
            "aventurier": {
                "classe": random.choice([
                    "guerrier", "r√¥deur", "roublard", "mage", "clerc"
                ]),
                "niveau_estime": random.choice([
                    "d√©butant", "exp√©riment√©", "v√©t√©ran", "l√©gendaire"
                ]),
                "specialite": random.choice([
                    "exploration de donjons", "chasse aux monstres",
                    "escorte de caravanes", "missions diplomatiques"
                ]),
                "info_extra": "Aventurier depuis " + str(random.randint(1, 15)) + " ans"
            },
            "artisan": {
                "metier": random.choice([
                    "forgeron", "menuisier", "tisserand", "potier",
                    "bijoutier", "cordonnier", "tailleur", "boulanger"
                ]),
                "reputation": random.choice([
                    "ma√Ætre artisan", "apprenti talentueux", "cr√©ateur renomm√©",
                    "artisan respect√©"
                ]),
                "specialite": random.choice([
                    "travail de pr√©cision", "cr√©ations uniques",
                    "r√©parations rapides", "commandes sp√©ciales"
                ]),
                "info_extra": "Pratique son art depuis " + str(random.randint(3, 25)) + " ans"
            },
            "paysan": {
                "activite": random.choice([
                    "agriculture", "√©levage", "viticulture", "apiculture",
                    "mara√Æchage", "sylviculture"
                ]),
                "statut": random.choice([
                    "propri√©taire", "fermier", "m√©tayer", "ouvrier agricole"
                ]),
                "specialite": random.choice([
                    "cultures c√©r√©ali√®res", "l√©gumes", "fruits", "b√©tail",
                    "produits laitiers", "miel et cire"
                ]),
                "info_extra": "Travaille la terre depuis " + str(random.randint(5, 40)) + " ans"
            },
            "voleur": {
                "specialite": random.choice([
                    "pickpocket", "cambrioleur", "escroc", "contrebandier",
                    "receleur", "assassin"
                ]),
                "reputation": random.choice([
                    "discret et efficace", "audacieux", "dangereux",
                    "myst√©rieux", "recherch√©"
                ]),
                "territoire": random.choice([
                    "quartiers riches", "docks", "march√©", "routes commerciales",
                    "tavernes", "arri√®re-cours"
                ]),
                "info_extra": "Actif dans le milieu depuis " + str(random.randint(2, 20)) + " ans"
            },
            "mage": {
                "ecole_magie": random.choice([
                    "√©vocation", "illusion", "enchantement", "divination",
                    "n√©cromancie", "transmutation", "abjuration", "invocation"
                ]),
                "niveau_estime": random.choice([
                    "apprenti", "magicien confirm√©", "ma√Ætre", "archimage"
                ]),
                "specialite": random.choice([
                    "recherche th√©orique", "cr√©ation d'objets magiques",
                    "sorts de combat", "sorts utilitaires", "rituels anciens"
                ]),
                "info_extra": "√âtudie la magie depuis " + str(random.randint(5, 35)) + " ans"
            }
        }

        return details_by_type.get(type_pnj, {
            "profession": type_pnj.title(),
            "experience": "Quelques ann√©es",
            "reputation": "Correcte",
            "info_extra": "D√©tails √† d√©velopper"
        })

    def _generate_secret(self, type_pnj: str) -> str:
        """G√©n√®re un secret ou une accroche RP"""

        secrets_generaux = [
            "Cache une dette importante envers la guilde des voleurs",
            "Recherche secr√®tement des informations sur un parent disparu",
            "Poss√®de un objet magique dont il ignore la nature",
            "Est en r√©alit√© d'origine noble mais a fui sa famille",
            "Conna√Æt l'emplacement d'un tr√©sor cach√©",
            "A √©t√© t√©moin d'un crime important",
            "Entretient une correspondance secr√®te avec quelqu'un",
            "Cache une peur profonde des cr√©atures magiques",
            "Poss√®de des talents cach√©s en magie",
            "Est membre secret d'une organisation"
        ]

        secrets_by_type = {
            "marchand": [
                "Vend parfois des objets vol√©s sans le savoir",
                "Finance secr√®tement un groupe d'aventuriers",
                "Cache une fortune dans un endroit secret",
                "A des accords avec des contrebandiers",
                "Collectionne des objets magiques rares",
                "Cherche √† racheter les dettes de sa famille"
            ],
            "noble": [
                "Sa fortune familiale provient d'activit√©s douteuses",
                "Entretient une liaison secr√®te avec un roturier",
                "Soutient en secret la r√©bellion contre le roi",
                "N'est pas le v√©ritable h√©ritier du titre",
                "Finance une organisation caritative secr√®te",
                "Cherche √† venger un membre de sa famille"
            ],
            "garde": [
                "Ferme les yeux sur certaines activit√©s ill√©gales contre paiement",
                "Enqu√™te secr√®tement sur la corruption dans ses rangs",
                "Prot√®ge quelqu'un en secret",
                "A laiss√© s'√©chapper un criminel volontairement",
                "Collecte des preuves contre son sup√©rieur",
                "Ancien criminel reconverti"
            ],
            "aubergiste": [
                "Son √©tablissement sert de planque √† des contrebandiers",
                "Cache des messages secrets pour une organisation",
                "Conna√Æt tous les ragots de la ville",
                "Prot√®ge un fugitif dans ses caves",
                "Ancien aventurier qui a raccroch√©",
                "Sa cuisine contient un ingr√©dient magique secret"
            ],
            "pretre": [
                "Doute secr√®tement de sa foi",
                "Utilise la magie divine √† des fins personnelles",
                "Cache un pass√© de p√©cheur repenti",
                "Poss√®de des textes religieux interdits",
                "M√®ne une double vie la nuit",
                "Cherche √† exposer la corruption dans son temple"
            ],
            "aventurier": [
                "Fuit une mal√©diction qui le poursuit",
                "Recherche un artefact l√©gendaire",
                "A trahi ses anciens compagnons",
                "Cache sa v√©ritable identit√©",
                "Poss√®de une carte de donjon secret",
                "Est le dernier survivant de son groupe"
            ],
            "artisan": [
                "Ses cr√©ations cachent des messages secrets",
                "Utilise des mat√©riaux d'origine douteuse",
                "Fabrique des objets pour la p√®gre",
                "Cache un talent pour la magie des objets",
                "Cherche √† recr√©er une technique perdue",
                "Ses outils sont en r√©alit√© magiques"
            ],
            "paysan": [
                "Ses terres cachent un ancien tombeau",
                "Cultive des plantes magiques en secret",
                "Fait de la contrebande avec ses r√©coltes",
                "A d√©couvert un filon de m√©tal pr√©cieux",
                "Prot√®ge une cr√©ature magique bless√©e",
                "Ancien soldat qui a d√©sert√©"
            ],
            "voleur": [
                "Pr√©pare un coup majeur depuis des mois",
                "Travaille pour deux organisations rivales",
                "Cherche √† venger un proche assassin√©",
                "Poss√®de des informations compromettantes sur un noble",
                "Cache son butin dans un endroit secret",
                "Ancien garde tomb√© dans la criminalit√©"
            ],
            "mage": [
                "Exp√©rimente avec de la magie interdite",
                "Cherche un moyen de prolonger sa vie",
                "Ses recherches ont attir√© l'attention d'entit√©s dangereuses",
                "Cache un familier inhabituel",
                "Poss√®de un grimoire vol√©",
                "M√®ne des exp√©riences sur les morts-vivants"
            ]
        }

        type_secrets = secrets_by_type.get(type_pnj, secrets_generaux)
        all_secrets = secrets_generaux + type_secrets

        return random.choice(all_secrets)

    def _generate_age(self, race: str) -> int:
        """G√©n√®re un √¢ge appropri√© selon la race"""

        age_ranges = {
            "humain": (18, 70),
            "elfe": (100, 500),
            "nain": (40, 250),
            "halfelin": (20, 100),
            "demi-elfe": (25, 150),
            "tieffelin": (18, 80)
        }

        min_age, max_age = age_ranges.get(race, (18, 70))
        return random.randint(min_age, max_age)

    def _create_pnj_embed(self, pnj: dict, type_pnj: str) -> discord.Embed:
        """Cr√©e un embed Discord pour afficher le PNJ (ancienne version - gard√©e pour compatibilit√©)"""
        
        embed = discord.Embed(
            title=f"üé≠ {pnj['nom']}",
            description=f"**{pnj['race']} {type_pnj.title()}** ({pnj['genre']})",
            color=0x3498db
        )

        # Apparence
        embed.add_field(
            name="üë§ Apparence",
            value=pnj['apparence'],
            inline=False
        )

        # Personnalit√©
        personnalite_text = (
            f"**Positif:** {pnj['personnalite']['trait_positif'].title()}\n"
            f"**N√©gatif:** {pnj['personnalite']['trait_negatif'].title()}\n"
            f"**Manie:** {pnj['personnalite']['maniere']}\n"
            f"**Motivation:** {pnj['personnalite']['motivation'].title()}"
        )
        embed.add_field(
            name="üß† Personnalit√©",
            value=personnalite_text,
            inline=True
        )

        # D√©tails professionnels
        details = pnj['details']
        if type_pnj == "marchand":
            details_text = (
                f"**Sp√©cialit√©:** {details.get('specialite', 'N/A')}\n"
                f"**Richesse:** {details.get('richesse', 'N/A')}\n"
                f"**R√©putation:** {details.get('reputation', 'N/A')}"
            )
        elif type_pnj == "noble":
            details_text = (
                f"**Titre:** {details.get('titre', 'N/A')}\n"
                f"**Domaine:** {details.get('domaine', 'N/A')}\n"
                f"**Influence:** {details.get('influence', 'N/A')}"
            )
        else:
            details_text = "D√©tails sp√©cifiques au type"

        embed.add_field(
            name="üíº D√©tails",
            value=details_text,
            inline=True
        )

        # Secret/Accroche
        embed.add_field(
            name="üé≤ Accroche RP",
            value=pnj['secret'],
            inline=False
        )

        embed.set_footer(text=f"√Çge: {pnj['age']} ans")
        embed.timestamp = discord.utils.utcnow()

        return embed
            "