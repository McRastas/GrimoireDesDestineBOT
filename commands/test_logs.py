"""
Commande Discord : /test-logs (ADMIN SEULEMENT)

DESCRIPTION:
    Teste le syst√®me de logs Discord du bot
    VISIBLE UNIQUEMENT pour les membres avec le r√¥le admin configur√©

FONCTIONNEMENT:
    - V√©rifie la configuration du canal admin
    - Teste les permissions d'envoi
    - Envoie un message de test dans le canal admin
    - Rapport d√©taill√© des r√©sultats

UTILISATION:
    /test-logs (Fa√ßonneurs seulement)
"""

import discord
from discord import app_commands
from .base import BaseCommand
from utils.permissions import has_admin_role
from utils.discord_logger import get_discord_logger
from utils.channels import ChannelHelper
from config import Config


class TestLogsCommand(BaseCommand):

    @property
    def name(self) -> str:
        return "test-logs"

    @property
    def description(self) -> str:
        return "Teste le syst√®me de logs Discord (Fa√ßonneurs seulement)"

    def register(self, tree: app_commands.CommandTree):
        """Enregistrement avec restriction de permissions."""

        @tree.command(name=self.name, description=self.description)
        # RESTRICTION : Commande visible seulement pour les admin
        @app_commands.check(self._is_admin)
        async def test_logs_command(interaction: discord.Interaction):
            await self.callback(interaction)

        # G√©rer l'erreur de permission
        @test_logs_command.error
        async def test_logs_error(interaction: discord.Interaction,
                                  error: app_commands.AppCommandError):
            if isinstance(error, app_commands.CheckFailure):
                await interaction.response.send_message(
                    f"‚ùå Cette commande est r√©serv√©e aux membres avec le r√¥le `{Config.ADMIN_ROLE_NAME}`.",
                    ephemeral=True)

    async def _is_admin(self, interaction: discord.Interaction) -> bool:
        """V√©rifie si l'utilisateur a les permissions admin."""
        return has_admin_role(interaction.user)

    async def callback(self, interaction: discord.Interaction):
        # Double v√©rification des permissions (s√©curit√©)
        if not has_admin_role(interaction.user):
            await interaction.response.send_message(
                f"‚ùå Acc√®s refus√©. R√¥le `{Config.ADMIN_ROLE_NAME}` requis.",
                ephemeral=True)
            return

        # Defer pour √©viter timeout
        await interaction.response.defer(ephemeral=True)

        # R√©cup√©rer le logger Discord
        discord_logger = get_discord_logger()
        if not discord_logger:
            await interaction.followup.send(
                "‚ùå Syst√®me de logs Discord non initialis√©.", ephemeral=True)
            return

        # Log de l'action admin
        discord_logger.admin_action("Test Syst√®me Logs", interaction.user,
                                    "Commande /test-logs utilis√©e")

        # Tester le syst√®me de logs
        result = await discord_logger.test_logging(interaction.guild)

        # Cr√©er l'embed de r√©sultat
        embed = discord.Embed(title="üß™ Test du Syst√®me de Logs Discord",
                              timestamp=discord.utils.utcnow())

        # Canal admin trouv√© ?
        if result['channel_found']:
            embed.color = 0x00ff00 if result['test_sent'] else 0xff9900

            embed.add_field(name="üìç Canal Admin Configur√©",
                            value=f"‚úÖ #{result['channel_name']}",
                            inline=True)

            # Permissions
            perm_status = "‚úÖ Autoris√©es" if result[
                'can_send'] else "‚ùå Manquantes"
            embed.add_field(name="üîê Permissions",
                            value=perm_status,
                            inline=True)

            # Test d'envoi
            test_status = "‚úÖ R√©ussi" if result['test_sent'] else "‚ùå √âchec"
            embed.add_field(name="üì® Test d'Envoi",
                            value=test_status,
                            inline=True)

            # Description selon le r√©sultat
            if result['test_sent']:
                embed.description = (
                    "‚úÖ **Syst√®me de logs parfaitement op√©rationnel !**\n"
                    f"Un message de test a √©t√© envoy√© dans #{result['channel_name']}."
                )

                # Envoyer quelques logs de d√©monstration
                discord_logger.info(
                    "Test des logs - Message INFO",
                    user=
                    f"{interaction.user.display_name} ({interaction.user.id})",
                    guild=f"{interaction.guild.name} ({interaction.guild.id})")

                discord_logger.warning(
                    "Test des logs - Message WARNING de d√©monstration")

            elif not result['can_send']:
                embed.description = (
                    "‚ö†Ô∏è **Canal trouv√© mais permissions insuffisantes**\n"
                    "Le bot ne peut pas envoyer de messages dans ce canal.")
                embed.add_field(
                    name="üîß Solution",
                    value=
                    (f"Accordez au bot les permissions suivantes dans #{result['channel_name']} :\n"
                     "‚Ä¢ Voir le canal\n"
                     "‚Ä¢ Envoyer des messages\n"
                     "‚Ä¢ Int√©grer des liens"),
                    inline=False)
            else:
                embed.description = (
                    "‚ùå **Erreur lors du test d'envoi**\n"
                    f"Permissions OK mais impossible d'envoyer dans #{result['channel_name']}."
                )
                if 'error' in result:
                    embed.add_field(name="üêõ Erreur",
                                    value=f"```{result['error']}```",
                                    inline=False)

        else:
            embed.color = 0xe74c3c
            embed.description = ("‚ùå **Canal admin non configur√©**\n"
                                 "Le syst√®me de logs ne peut pas fonctionner.")

            embed.add_field(
                name="üîß Configuration Requise",
                value=("Configurez une de ces variables d'environnement :\n"
                       "‚Ä¢ `CHANNEL_ADMIN_NAME=bot-admin`\n"
                       "‚Ä¢ `CHANNEL_ADMIN_ID=123456789`\n"
                       "‚Ä¢ Dans `CHANNELS_CONFIG` JSON"),
                inline=False)

            embed.add_field(
                name="üí° Aide",
                value=
                "Utilisez `/config-channels action:guide` pour plus d'infos",
                inline=False)

        # Informations sur la configuration actuelle
        admin_config = Config.get_channel_config('admin')
        if admin_config:
            config_text = []
            if admin_config.get('name'):
                config_text.append(f"Nom: #{admin_config['name']}")
            if admin_config.get('id'):
                config_text.append(f"ID: `{admin_config['id']}`")

            if config_text:
                embed.add_field(name="‚öôÔ∏è Configuration Actuelle",
                                value=" | ".join(config_text),
                                inline=False)

        # Footer avec info utilisateur
        embed.set_footer(
            text=
            f"Test effectu√© par {interaction.user.display_name} ‚Ä¢ {Config.ADMIN_ROLE_NAME}"
        )

        await interaction.followup.send(embed=embed)
