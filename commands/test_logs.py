"""
Commande Discord : /test-logs (ADMIN SEULEMENT)

DESCRIPTION:
    Teste le syst√®me de logs Discord du bot
    VISIBLE UNIQUEMENT pour les membres avec le r√¥le admin configur√©

FONCTIONNEMENT:
    - V√©rifie la configuration du canal admin
    - Teste les permissions d'envoi
    - Envoie un message de test dans le canal admin
    - Rapport d√©taill√© des r√©sultats

UTILISATION:
    /test-logs (Fa√ßonneurs seulement)

VERSION CORRIG√âE - Utilise les loggers corrig√©s et am√©liore les diagnostics.
"""

import discord
from discord import app_commands
from .base import BaseCommand
from utils.permissions import has_admin_role
from utils.discord_logger import get_discord_logger
from utils.file_logger import get_daily_logger
from utils.channels import ChannelHelper
from config import Config


class TestLogsCommand(BaseCommand):

    @property
    def name(self) -> str:
        return "test-logs"

    @property
    def description(self) -> str:
        return "Teste le syst√®me de logs Discord (Fa√ßonneurs seulement)"

    def register(self, tree: app_commands.CommandTree):
        """Enregistrement avec restriction de permissions."""

        @tree.command(name=self.name, description=self.description)
        # RESTRICTION : Commande visible seulement pour les admin
        @app_commands.check(self._is_admin)
        async def test_logs_command(interaction: discord.Interaction):
            await self.callback(interaction)

        # G√©rer l'erreur de permission
        @test_logs_command.error
        async def test_logs_error(interaction: discord.Interaction,
                                  error: app_commands.AppCommandError):
            if isinstance(error, app_commands.CheckFailure):
                await interaction.response.send_message(
                    f"‚ùå Cette commande est r√©serv√©e aux membres avec le r√¥le `{Config.ADMIN_ROLE_NAME}`.",
                    ephemeral=True)

    async def _is_admin(self, interaction: discord.Interaction) -> bool:
        """V√©rifie si l'utilisateur a les permissions admin."""
        return has_admin_role(interaction.user)

    async def callback(self, interaction: discord.Interaction):
        # Double v√©rification des permissions (s√©curit√©)
        if not has_admin_role(interaction.user):
            await interaction.response.send_message(
                f"‚ùå Acc√®s refus√©. R√¥le `{Config.ADMIN_ROLE_NAME}` requis.",
                ephemeral=True)
            return

        # R√©cup√©rer les loggers
        discord_logger = get_discord_logger()
        daily_logger = get_daily_logger()
        
        if not discord_logger:
            await interaction.response.send_message(
                "‚ùå Syst√®me de logs Discord non initialis√©.", 
                ephemeral=True)
            return

        # Defer pour √©viter timeout
        await interaction.response.defer(ephemeral=True)

        # Log de l'action admin dans le fichier quotidien
        if daily_logger:
            daily_logger.log_admin_action(
                interaction.user, 
                "Test Syst√®me Logs", 
                "Commande /test-logs utilis√©e"
            )

        # Log de l'action admin dans Discord
        discord_logger.admin_action(
            "Test Syst√®me Logs", 
            interaction.user,
            "Commande /test-logs utilis√©e"
        )

        # Tester le syst√®me de logs Discord
        result = await discord_logger.test_logging(interaction.guild)

        # NOUVEAU : R√©cup√©rer le statut complet du Discord Logger
        discord_status = discord_logger.get_status()

        # NOUVEAU : Tester le syst√®me de logs quotidiens
        file_result = self._test_daily_logger(daily_logger) if daily_logger else None

        # Cr√©er l'embed de r√©sultat avec diagnostics complets
        embed = discord.Embed(
            title="üß™ Test Complet du Syst√®me de Logs",
            timestamp=discord.utils.utcnow()
        )

        # === TEST DISCORD LOGGER ===
        if result['channel_found']:
            if result['test_sent']:
                embed.color = 0x00ff00  # Vert - Succ√®s complet
                discord_status_text = "‚úÖ **Parfaitement op√©rationnel !**"
                embed.add_field(
                    name="üìç Canal Admin Configur√©",
                    value=f"‚úÖ #{result['channel_name']}",
                    inline=True
                )
            elif not result['can_send']:
                embed.color = 0xff9900  # Orange - Probl√®me de permissions
                discord_status_text = "‚ö†Ô∏è **Canal trouv√© mais permissions insuffisantes**"
                embed.add_field(
                    name="üìç Canal Admin Configur√©",
                    value=f"‚ö†Ô∏è #{result['channel_name']} (pas de permissions)",
                    inline=True
                )
            elif result.get('in_cooldown'):
                embed.color = 0xff9900  # Orange - En cooldown
                discord_status_text = "‚è∏Ô∏è **Syst√®me en cooldown temporaire**"
                embed.add_field(
                    name="üìç Canal Admin Configur√©",
                    value=f"‚è∏Ô∏è #{result['channel_name']} (cooldown actif)",
                    inline=True
                )
            else:
                embed.color = 0xff0000  # Rouge - Erreur
                discord_status_text = "‚ùå **Erreur lors du test d'envoi**"
                embed.add_field(
                    name="üìç Canal Admin Configur√©",
                    value=f"‚ùå #{result['channel_name']} (erreur d'envoi)",
                    inline=True
                )
        else:
            embed.color = 0xe74c3c  # Rouge fonc√© - Non configur√©
            discord_status_text = "‚ùå **Canal admin non configur√©**"
            embed.add_field(
                name="üìç Canal Admin",
                value="‚ùå Non configur√©",
                inline=True
            )

        # Permissions d√©taill√©es
        if result['channel_found']:
            perm_status = "‚úÖ Autoris√©es" if result['can_send'] else "‚ùå Manquantes"
            embed.add_field(
                name="üîê Permissions",
                value=perm_status,
                inline=True
            )

            # Test d'envoi
            if result.get('in_cooldown'):
                test_status = "‚è∏Ô∏è Cooldown actif"
            elif result['test_sent']:
                test_status = "‚úÖ Message envoy√©"
            else:
                test_status = "‚ùå √âchec d'envoi"
                
            embed.add_field(
                name="üì® Test d'Envoi",
                value=test_status,
                inline=True
            )

        embed.add_field(
            name="üì¢ Statut Discord Logger",
            value=discord_status_text,
            inline=False
        )

        # === DIAGNOSTIC AVANC√â DISCORD LOGGER ===
        diagnostic_text = []
        diagnostic_text.append(f"**√âtat :** {'‚úÖ Pr√™t' if discord_status['ready'] else '‚è≥ En attente'}")
        diagnostic_text.append(f"**Erreurs :** {discord_status['error_count']}/{discord_status['max_errors']}")
        
        if discord_status['in_cooldown']:
            diagnostic_text.append("**Cooldown :** ‚è∏Ô∏è Actif (pause temporaire)")
        else:
            diagnostic_text.append("**Cooldown :** ‚úÖ Inactif")
            
        diagnostic_text.append(f"**Cache :** {discord_status['cache_size']} logs en attente")
        diagnostic_text.append(f"**Anti-doublons :** {discord_status['sent_messages_cache']} entr√©es")

        embed.add_field(
            name="üîç Diagnostic Discord Logger",
            value="\n".join(diagnostic_text),
            inline=False
        )

        # === TEST DAILY LOGGER ===
        if file_result:
            daily_status_text = []
            
            if file_result['logger_available']:
                daily_status_text.append("‚úÖ **Logger quotidien op√©rationnel**")
                daily_status_text.append(f"üìÅ Fichier: `{file_result['filename']}`")
                daily_status_text.append(f"üìä Taille: {file_result['size_str']}")
                
                if file_result['writable']:
                    daily_status_text.append("‚úÖ √âcriture test√©e avec succ√®s")
                else:
                    daily_status_text.append("‚ùå Probl√®me d'√©criture d√©tect√©")
            else:
                daily_status_text.append("‚ùå **Logger quotidien non disponible**")

            embed.add_field(
                name="üìù Logs Quotidiens",
                value="\n".join(daily_status_text),
                inline=False
            )

        # === SOLUTIONS ET RECOMMANDATIONS ===
        solutions = []
        
        if not result['channel_found']:
            solutions.append("üîß **Configuration requise :**")
            solutions.append("‚Ä¢ Configurez `CHANNEL_ADMIN_NAME=bot-admin`")
            solutions.append("‚Ä¢ Ou `CHANNEL_ADMIN_ID=123456789`")
            solutions.append("‚Ä¢ Utilisez `/config-channels action:guide`")
            
        elif not result['can_send']:
            solutions.append("üîß **Permissions manquantes :**")
            solutions.append(f"‚Ä¢ Accordez au bot l'acc√®s √† #{result['channel_name']}")
            solutions.append("‚Ä¢ Permissions requises : Voir canal, Envoyer messages, Int√©grer liens")
            
        elif result.get('in_cooldown'):
            solutions.append("‚è∏Ô∏è **Syst√®me en cooldown :**")
            solutions.append(f"‚Ä¢ Trop d'erreurs d√©tect√©es ({discord_status['error_count']})")
            solutions.append("‚Ä¢ Le syst√®me reprendra automatiquement dans quelques minutes")
            solutions.append("‚Ä¢ Utilisez `/stats-logs` pour plus de d√©tails")
            
        elif result.get('error'):
            solutions.append("üêõ **Erreur d√©tect√©e :**")
            solutions.append(f"‚Ä¢ `{result['error']}`")
            solutions.append("‚Ä¢ V√©rifiez la configuration et les permissions")

        if not daily_logger:
            solutions.append("üìù **Logger quotidien :**")
            solutions.append("‚Ä¢ Syst√®me de logs quotidiens non initialis√©")
            solutions.append("‚Ä¢ Red√©marrage du bot recommand√©")

        if solutions:
            embed.add_field(
                name="üí° Solutions Recommand√©es",
                value="\n".join(solutions),
                inline=False
            )

        # === COMMANDES UTILES ===
        useful_commands = [
            "‚Ä¢ `/config-channels action:test` - Tester la config des canaux",
            "‚Ä¢ `/stats-logs` - Voir les statistiques d√©taill√©es",
            "‚Ä¢ `!debug_bot` - Informations de d√©bogage compl√®tes"
        ]
        
        if discord_status['in_cooldown']:
            useful_commands.append("‚Ä¢ *Attendre la fin du cooldown pour un nouveau test*")

        embed.add_field(
            name="üõ†Ô∏è Commandes Utiles",
            value="\n".join(useful_commands),
            inline=False
        )

        # Footer avec informations d√©taill√©es
        footer_parts = [f"Test par {interaction.user.display_name}"]
        footer_parts.append(Config.ADMIN_ROLE_NAME)
        
        if result['channel_found']:
            footer_parts.append(f"Canal: #{result['channel_name']}")
        
        embed.set_footer(text=" ‚Ä¢ ".join(footer_parts))

        await interaction.followup.send(embed=embed)

    def _test_daily_logger(self, daily_logger) -> dict:
        """NOUVEAU : Teste le syst√®me de logs quotidiens."""
        if not daily_logger:
            return {'logger_available': False}
        
        try:
            # R√©cup√©rer les informations du fichier
            file_info = daily_logger.get_file_info()
            
            # Tester l'√©criture
            test_writable = True
            try:
                # Simuler un log de test (ne s'affichera pas r√©ellement)
                import logging
                test_logger = logging.getLogger('faerun_test')
                test_logger.info("Test d'√©criture du syst√®me de logs")
            except Exception:
                test_writable = False
            
            return {
                'logger_available': True,
                'filename': file_info['filename'],
                'size_str': file_info['size_str'],
                'exists': file_info['exists'],
                'writable': test_writable
            }
            
        except Exception as e:
            return {
                'logger_available': False,
                'error': str(e)
            }