# commands/parchemin/__init__.py
"""
Module Parchemin - Bot Faer√ªn (Parchemins de sorts D&D 5e)

Ce module fournit un syst√®me de g√©n√©ration de parchemins al√©atoires bas√© sur Google Sheets
pour g√©n√©rer des sorts D&D 5e avec filtres avanc√©s.

ARCHITECTURE MODULAIRE:
    - main_command_v2.py        : Commande principale parchemin
    - google_sheets_client.py   : Client pour acc√©der au Google Sheets public
    - spell_selector_v2.py      : S√©lecteur de sorts avec filtres
    - response_builder_v2.py    : Constructeur de r√©ponses Discord
    - config_v2.py             : Configuration des parchemins
    - __init__.py              : Assemblage et exports du module

UTILISATION:
    from commands.parchemin import ParcheminCommand
    
    command = ParcheminCommand(bot)
    command.register(bot.tree)

FONCTIONNALIT√âS:
    ‚úÖ Acc√®s aux Google Sheets publics (pas de credentials requis)
    ‚úÖ Filtrage par niveau, √©cole, classe, rituel
    ‚úÖ S√©lection al√©atoire de 1-15 sorts
    ‚úÖ Formatage Discord avec embeds enrichis
    ‚úÖ Gestion d'erreurs robuste
    ‚úÖ Liens directs vers Google Sheets
    ‚úÖ Support plages de niveaux (ex: 1-3)
    ‚úÖ Emojis par √©cole de magie
    ‚úÖ Cache intelligent des donn√©es
"""

# Import principal - utiliser la version V2 comme version principale (m√™me logique que boutique)
try:
    from .main_command_v2 import ParcheminCommandV2 as ParcheminCommand
    PARCHEMIN_AVAILABLE = True
    print("‚úÖ Module parchemin charg√© avec succ√®s")
except ImportError as e:
    PARCHEMIN_AVAILABLE = False
    print(f"‚ùå Module parchemin non disponible: {e}")
    print("   ‚Ä¢ V√©rifiez que main_command_v2.py existe")
    print("   ‚Ä¢ V√©rifiez que aiohttp est install√©")

# Import des composants pour usage avanc√© (m√™me structure que boutique)
try:
    from .google_sheets_client import GoogleSheetsClient
    SHEETS_CLIENT_AVAILABLE = True
except ImportError:
    SHEETS_CLIENT_AVAILABLE = False
    print("‚ö†Ô∏è GoogleSheetsClient non disponible")

try:
    from .spell_selector_v2 import SpellSelectorV2
    SPELL_SELECTOR_AVAILABLE = True
except ImportError:
    SPELL_SELECTOR_AVAILABLE = False
    print("‚ö†Ô∏è SpellSelectorV2 non disponible")

try:
    from .response_builder_v2 import ParcheminResponseBuilderV2
    RESPONSE_BUILDER_AVAILABLE = True
except ImportError:
    RESPONSE_BUILDER_AVAILABLE = False
    print("‚ö†Ô∏è ParcheminResponseBuilderV2 non disponible")

try:
    from .config_v2 import get_config, validate_config
    CONFIG_AVAILABLE = True
except ImportError:
    CONFIG_AVAILABLE = False
    print("‚ö†Ô∏è Configuration V2 non disponible")

# Export principal (m√™me structure que boutique)
__all__ = []

if PARCHEMIN_AVAILABLE:
    __all__.append('ParcheminCommand')

if SHEETS_CLIENT_AVAILABLE:
    __all__.append('GoogleSheetsClient')

if SPELL_SELECTOR_AVAILABLE:
    __all__.append('SpellSelectorV2')

if RESPONSE_BUILDER_AVAILABLE:
    __all__.append('ParcheminResponseBuilderV2')

if CONFIG_AVAILABLE:
    __all__.extend(['get_config', 'validate_config'])

# M√©tadonn√©es du module (adaptation de boutique)
__version__ = "1.0.0-SPELLS"
__author__ = "Bot Faer√ªn Team"
__description__ = "Syst√®me de g√©n√©ration de parchemins de sorts bas√© sur Google Sheets"

# Configuration du module (m√™me structure que boutique)
MODULE_CONFIG = {
    'version': __version__,
    'format': 'D&D_5E_SPELLS',
    'parchemin_available': PARCHEMIN_AVAILABLE,
    'components': {
        'sheets_client': SHEETS_CLIENT_AVAILABLE,
        'spell_selector': SPELL_SELECTOR_AVAILABLE,
        'response_builder': RESPONSE_BUILDER_AVAILABLE,
        'config': CONFIG_AVAILABLE
    },
    'features': [
        'Format D&D 5e natif',
        'Niveaux 0-9 (cantrips √† niveau 9)',
        'Filtrage par √©cole, classe, rituel',
        'Plages de niveaux (ex: 1-3)',
        'Emojis par √©cole de magie',
        'Couleurs par niveau de sort',
        'S√©lection al√©atoire √©quilibr√©e',
        'Cache intelligent des donn√©es',
        'Support GID Google Sheets',
        'Affichage enrichi Discord'
    ]
}

def create_command_instance(bot):
    """
    Factory function pour cr√©er une instance de la commande parchemin.
    M√™me pattern que boutique.
    
    Args:
        bot: Instance du bot Discord
        
    Returns:
        ParcheminCommand: Instance configur√©e de la commande
    """
    if not PARCHEMIN_AVAILABLE:
        raise ImportError("La commande parchemin n'est pas disponible")
    
    return ParcheminCommand(bot)

def get_module_info() -> dict:
    """
    Retourne les informations sur le module parchemin.
    M√™me fonction que boutique.
    
    Returns:
        dict: Informations compl√®tes du module
    """
    return MODULE_CONFIG

def diagnose_module() -> dict:
    """
    Effectue un diagnostic du module parchemin.
    M√™me logique que boutique/diagnose_module.
    
    Returns:
        dict: R√©sultats du diagnostic
    """
    diagnosis = {
        'module_ready': PARCHEMIN_AVAILABLE,
        'version': __version__,
        'format': 'D&D_5E_SPELLS',
        'all_components_available': all([
            PARCHEMIN_AVAILABLE,
            SHEETS_CLIENT_AVAILABLE, 
            SPELL_SELECTOR_AVAILABLE,
            RESPONSE_BUILDER_AVAILABLE,
            CONFIG_AVAILABLE
        ]),
        'components_status': MODULE_CONFIG['components'],
        'missing_components': [
            comp for comp, available in MODULE_CONFIG['components'].items() 
            if not available
        ]
    }
    
    return diagnosis

# Message d'initialisation (m√™me structure que boutique)
if __name__ == "__main__":
    print("üîß Module Parchemin D&D 5e")
    print("=" * 40)
    
    diag = diagnose_module()
    print(f"üì¶ Version: {diag['version']}")
    print(f"üéØ Format: {diag['format']}")
    print(f"‚úÖ Module pr√™t: {diag['module_ready']}")
    
    if diag['missing_components']:
        print(f"‚ö†Ô∏è Composants manquants: {', '.join(diag['missing_components'])}")
    else:
        print("‚úÖ Tous les composants sont disponibles")
    
    print(f"\nüöÄ Utilisation: from commands.parchemin import ParcheminCommand")
    print(f"   Commande Discord: /parchemin")

# Auto-diagnostic au chargement du module (m√™me logique que boutique)
try:
    if CONFIG_AVAILABLE:
        if validate_config():
            print("‚úÖ Configuration parchemin valid√©e")
        else:
            print("‚ö†Ô∏è Configuration parchemin invalide")
except Exception as e:
    print(f"‚ö†Ô∏è Erreur validation configuration: {e}")

print(f"üìã Module parchemin charg√© - {len(__all__)} exports disponibles")